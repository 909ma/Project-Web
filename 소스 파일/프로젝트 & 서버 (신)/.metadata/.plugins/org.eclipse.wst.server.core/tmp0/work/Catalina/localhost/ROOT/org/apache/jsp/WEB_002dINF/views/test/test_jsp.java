/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-06-21 02:43:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.test;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import org.json.JSONArray;
import org.json.JSONObject;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.HttpURLConnection");
    _jspx_imports_classes.add("org.json.JSONObject");
    _jspx_imports_classes.add("java.net.URL");
    _jspx_imports_classes.add("java.io.BufferedReader");
    _jspx_imports_classes.add("java.io.InputStreamReader");
    _jspx_imports_classes.add("org.json.JSONArray");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Movie List</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        table {\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th, td {\r\n");
      out.write("            padding: 8px;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("            border-bottom: 1px solid #ddd;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        th {\r\n");
      out.write("            background-color: #f2f2f2;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>영화 추천 리스트</h1>\r\n");
      out.write("    <h3>너무 낮은 값을 입력하면 데이터의 양이 많아서 오래 걸립니다.</h3>\r\n");
      out.write("    <form method=\"GET\">\r\n");
      out.write("        <label for=\"audiacc\">관객 수 기준:</label>\r\n");
      out.write("        <input type=\"number\" id=\"audiacc\" name=\"audiacc\">\r\n");
      out.write("        <input type=\"submit\" value=\"검색\">\r\n");
      out.write("    </form>\r\n");
      out.write("    <table>\r\n");
      out.write("        <tr>\r\n");
      out.write("            <th>영화</th>\r\n");
      out.write("            <th>관객 수</th>\r\n");
      out.write("            <th>개봉일</th>\r\n");
      out.write("            <th>평점</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");
 
            // JDBC 관련 설정
            String dbUrl = "jdbc:mysql://localhost/myproject?useUnicode=true&characterEncoding=utf8";
            String username = "root";
            String password = "1234";

            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;

            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
                conn = DriverManager.getConnection(dbUrl, username, password);

                // 사용자 입력 값 받기
                String audiaccParam = request.getParameter("audiacc");
                int audiaccValue = 0; // 기본값

                // 사용자 입력 값이 있을 경우 정수로 변환
                if (audiaccParam != null && !audiaccParam.isEmpty()) {
                    audiaccValue = Integer.parseInt(audiaccParam);
                }

                String sql = "SELECT movieNm, MAX(audiacc) AS max_audiacc, openDt, number " +
                             "FROM myproject.dailymovie " +
                             "WHERE audiacc >= " + audiaccValue + " " +
                             "GROUP BY movieNm, openDt, number " +
                             "ORDER BY max_audiacc DESC";
                stmt = conn.createStatement();
                rs = stmt.executeQuery(sql);

                while (rs.next()) {
                    String movieNm = rs.getString("movieNm");
                    int maxAudiacc = rs.getInt("max_audiacc");
                    String openDt = rs.getString("openDt");
                    int number = rs.getInt("number"); // 영화의 고유 식별자
                    
                    // 관객 수를 세 자리마다 쉼표로 구분하여 출력
                    String formattedAudiacc = String.format("%,d", maxAudiacc);
                    
                    // 영화 평점 조회
                    String api_key = "e2a56aa6721d47327a92acc02bfbddf3";
                    
                    // 영화명을 영문으로 검색하기 위해 API로부터 영문 제목 가져오기
                    String movieCdUrl = "http://www.kobis.or.kr/kobisopenapi/webservice/rest/movie/searchMovieInfo.json?key=f5eef3421c602c6cb7ea224104795888&movieCd=" + number;

                    HttpURLConnection movieCdConnection = null;
                    BufferedReader movieCdReader = null;
                    try {
                        URL movieCdApiUrl = new URL(movieCdUrl);
                        movieCdConnection = (HttpURLConnection) movieCdApiUrl.openConnection();
                        movieCdConnection.setRequestMethod("GET");

                        int movieCdResponseCode = movieCdConnection.getResponseCode();
                        if (movieCdResponseCode == HttpURLConnection.HTTP_OK) {
                            movieCdReader = new BufferedReader(new InputStreamReader(movieCdConnection.getInputStream()));
                            String movieCdLine;
                            StringBuilder movieCdResponse = new StringBuilder();
                            while ((movieCdLine = movieCdReader.readLine()) != null) {
                                movieCdResponse.append(movieCdLine);
                            }

                            JSONObject movieCdData = new JSONObject(movieCdResponse.toString());
                            JSONObject movieInfoResult = movieCdData.getJSONObject("movieInfoResult");
                            JSONObject movieInfo = movieInfoResult.getJSONObject("movieInfo");
                            String movieNmEn = movieInfo.getString("movieNmEn");

                            // 영화 평점 조회
                            String movieName = movieNmEn.replace(" ", "%20");
                            String movieUrl = "https://api.themoviedb.org/3/search/movie?api_key=" + api_key + "&query=" + movieName;

                            HttpURLConnection movieConnection = null;
                            BufferedReader movieReader = null;
                            try {
                                URL movieApiUrl = new URL(movieUrl);
                                movieConnection = (HttpURLConnection) movieApiUrl.openConnection();
                                movieConnection.setRequestMethod("GET");

                                int movieResponseCode = movieConnection.getResponseCode();
                                if (movieResponseCode == HttpURLConnection.HTTP_OK) {
                                    movieReader = new BufferedReader(new InputStreamReader(movieConnection.getInputStream()));
                                    String movieLine;
                                    StringBuilder movieResponse = new StringBuilder();
                                    while ((movieLine = movieReader.readLine()) != null) {
                                        movieResponse.append(movieLine);
                                    }

                                    JSONObject searchResults = new JSONObject(movieResponse.toString());
                                    int totalResults = searchResults.getInt("total_results");
                                    if (totalResults > 0) {
                                        JSONArray movies = searchResults.getJSONArray("results");
                                        JSONObject movie = movies.getJSONObject(0);
                                        int movieId = movie.getInt("id");

                                        String movieDetailUrl = "https://api.themoviedb.org/3/movie/" + movieId + "?api_key=" + api_key;

                                        HttpURLConnection detailConnection = null;
                                        BufferedReader detailReader = null;
                                        try {
                                            URL detailApiUrl = new URL(movieDetailUrl);
                                            detailConnection = (HttpURLConnection) detailApiUrl.openConnection();
                                            detailConnection.setRequestMethod("GET");

                                            int detailResponseCode = detailConnection.getResponseCode();
                                            if (detailResponseCode == HttpURLConnection.HTTP_OK) {
                                                detailReader = new BufferedReader(new InputStreamReader(detailConnection.getInputStream()));
                                                String detailLine;
                                                StringBuilder detailResponse = new StringBuilder();
                                                while ((detailLine = detailReader.readLine()) != null) {
                                                    detailResponse.append(detailLine);
                                                }

                                                JSONObject movieData = new JSONObject(detailResponse.toString());
                                                double rating = movieData.getDouble("vote_average");
                                                String formattedRating = String.format("%.1f", rating);

                                                
      out.write("\r\n");
      out.write("                                                <tr>\r\n");
      out.write("                                                    <td><a href=\"movieDetail?number=");
      out.print( number );
      out.write('"');
      out.write('>');
      out.print( movieNm );
      out.write("</a></td>\r\n");
      out.write("                                                    <td>");
      out.print( formattedAudiacc );
      out.write(" 명</td>\r\n");
      out.write("                                                    <td>");
      out.print( openDt );
      out.write("</td>\r\n");
      out.write("                                                    <td>");
      out.print( formattedRating );
      out.write("</td>\r\n");
      out.write("                                                </tr>\r\n");
      out.write("                                                ");

                                            } else {
                                                // 영화 상세 정보 요청 실패
                                                out.println("영화 상세 정보 요청에 실패하였습니다.");
                                            }
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        } finally {
                                            if (detailReader != null) {
                                                detailReader.close();
                                            }
                                            if (detailConnection != null) {
                                                detailConnection.disconnect();
                                            }
                                        }
                                    } else {
                                        // 영화 검색 결과 없음
                                        out.println("'" + movieNm + "'에 대한 검색 결과가 없습니다.");
                                    }
                                } else {
                                    // 영화 검색 요청 실패
                                    out.println("영화 검색 요청에 실패하였습니다.");
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            } finally {
                                if (movieReader != null) {
                                    movieReader.close();
                                }
                                if (movieConnection != null) {
                                    movieConnection.disconnect();
                                }
                            }
                        } else {
                            // 영화 코드 검색 요청 실패
                            out.println("영화 코드 검색 요청에 실패하였습니다.");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    } finally {
                        if (movieCdReader != null) {
                            movieCdReader.close();
                        }
                        if (movieCdConnection != null) {
                            movieCdConnection.disconnect();
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        
      out.write("\r\n");
      out.write("    </table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
